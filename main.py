# StarLinker v. 1.0
# a tool for searching YouTube influencers
# (c)Starpets 2025

import streamlit as st
import pandas as pd
from googleapiclient.discovery import build
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á –∏–∑ .env
load_dotenv()
api_key = os.getenv("YOUTUBE_API_KEY")

st.title("üîé StarLinker ‚Äî –ü–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤ –Ω–∞ YouTube")

# –í–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
keywords = st.text_area("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)").splitlines()

# –§–∏–ª—å—Ç—Ä—ã
min_subs = st.number_input("–ú–∏–Ω. –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", value=1000, step=500)
max_subs = st.number_input("–ú–∞–∫—Å. –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", value=500000, step=1000)
min_views = st.number_input("–ú–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞", value=10000, step=1000)

if st.button("üîç –ù–∞–π—Ç–∏ –±–ª–æ–≥–µ—Ä–æ–≤"):
    if not api_key:
        st.error("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")
    elif not keywords:
        st.error("‚ùå –í–≤–µ–¥–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!")
    else:
        youtube = build("youtube", "v3", developerKey=api_key)

        results = []

        for kw in keywords:
            # –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
            search_req = youtube.search().list(
                q=kw,
                part="snippet",
                type="video",
                maxResults=20
            )
            search_res = search_req.execute()

            for item in search_res["items"]:
                channel_id = item["snippet"]["channelId"]
                channel_title = item["snippet"]["channelTitle"]

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
                channel_req = youtube.channels().list(
                    part="statistics,snippet",
                    id=channel_id
                )
                channel_res = channel_req.execute()

                if channel_res["items"]:
                    stats = channel_res["items"][0]["statistics"]
                    snippet = channel_res["items"][0]["snippet"]

                    subs = int(stats.get("subscriberCount", 0))
                    views = int(stats.get("viewCount", 0))
                    country = snippet.get("country", "N/A")

                    if min_subs <= subs <= max_subs and views >= min_views:
                        results.append({
                            "–ö–∞–Ω–∞–ª": channel_title,
                            "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏": subs,
                            "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": views,
                            "–°—Ç—Ä–∞–Ω–∞": country,
                            "–°—Å—ã–ª–∫–∞": f"https://www.youtube.com/channel/{channel_id}"
                        })

        if results:
            df = pd.DataFrame(results)
            df.drop_duplicates(subset=["–°—Å—ã–ª–∫–∞"], inplace=True)
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df)} –±–ª–æ–≥–µ—Ä–æ–≤")
            st.dataframe(df)

            # –°–∫–∞—á–∞—Ç—å Excel
            excel_file = "bloggers.xlsx"
            df.to_excel(excel_file, index=False)
            with open(excel_file, "rb") as f:
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å Excel",
                    data=f,
                    file_name="bloggers.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        else:
            st.warning("üòï –ë–ª–æ–≥–µ—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")